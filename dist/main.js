(()=>{"use strict";class e{constructor(e){this.projectName=e,this.task=[]}addTask(e){this.task.push(e)}displayTask(e){console.log(this.task[e-1])}getDescription(){return this.task.map((e=>e.description))}getPrio(){return this.task.map((e=>e.priority))}getDueDate(){return this.task.map((e=>e.dueDate))}getID(){return console.log(this.task.map((e=>e.id)))}}function t(e){let t=0,n=0;const o=document.createElement("div"),i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("name","setProperty"),i.setAttribute("id","setProperty");const a=document.createElement("label");a.setAttribute("for","setProperty"),a.innerHTML="Task Name:",o.classList.add("taskDiv");const c=document.createElement("select");c.setAttribute("name","setPrio"),c.setAttribute("id","setPrio");const r=document.createElement("option");r.setAttribute("value","high");const d=document.createTextNode("High"),s=document.createElement("option");s.setAttribute("value","medium");const l=document.createTextNode("Medium"),p=document.createElement("option");p.setAttribute("value","low");const m=document.createTextNode("Low");r.appendChild(d),s.appendChild(l),p.appendChild(m),c.appendChild(r),c.appendChild(s),c.appendChild(p);const u=document.createElement("label");u.setAttribute("for","setPrio"),u.innerHTML="Add Priority";const h=document.createElement("input");h.setAttribute("type","date"),h.setAttribute("name","taskDueDate"),h.setAttribute("id","taskDueDate"),h.setAttribute("required","");const g=document.createElement("label");g.setAttribute("for","taskDueDate"),g.innerHTML="Due: ";const k=document.createElement("button");k.innerHTML="add";const E=document.createElement("div");return E.classList.add("taskOptions"),k.addEventListener("click",(()=>{const a=i.value,r=c.value,d=h.value;e.addTask({description:a,priority:r,dueDate:d,id:t++}),n++,e.task,(JSON.parse(localStorage.getItem("Projects"))||[]).find((e=>e.projectName===project.projectName));const s=document.createElement("div");s.classList.add("currentTasks"),s.setAttribute("data-id",n-1),i.value="",console.log(e);const l=s.dataset.id;console.log(l+"for currenttaskDiv"),s.innerHTML=`Task name: ${e.getDescription()[e.task.length-1]},\n             priority: ${e.getPrio()[e.task.length-1]},\n             it is due till ${e.getDueDate()[e.task.length-1]}`;const p=document.createElement("button");p.innerHTML="Mark as complete",p.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)e.task[t].id==l&&(s.classList.contains("complete")?s.classList.remove("complete"):s.classList.add("complete"))}));const m=document.createElement("button");m.classList.add("deleteTask"),m.innerHTML="Delete Task",m.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)e.task[t].id==l&&(e.task.splice(t,1),s.innerHTML=`Task name: ${e.getDescription()[t]},\n                     priority: ${e.getPrio()[t]},\n                     it is due till ${e.getDueDate()[t]}`);o.removeChild(s)}));const u=document.createElement("button");u.innerHTML="Edit Name",u.addEventListener("click",(()=>{let t=prompt("New Task name:");for(let n=0;n<e.task.length;n++)e.task[n].id==l&&(e.task[n].description=t,s.innerHTML=`Task name: ${e.getDescription()[n]},\n                     priority: ${e.getPrio()[n]},\n                     it is due till ${e.getDueDate()[n]}`);console.log(e),s.appendChild(p),s.appendChild(u),s.appendChild(m)})),o.appendChild(s),s.appendChild(p),s.appendChild(u),s.appendChild(m)})),E.appendChild(a),E.appendChild(i),E.appendChild(u),E.appendChild(c),E.appendChild(g),E.appendChild(h),E.appendChild(k),o.appendChild(E),o}const n=document.getElementById("content"),o=document.getElementById("projectName");document.getElementById("submit").addEventListener("click",(()=>{const i=document.createElement("div");i.setAttribute("id","projectNameDiv");const a=document.createElement("div");a.setAttribute("id","projectHeadline");const c=document.createElement("h3");let r=o.value,d=new e(r);c.innerHTML=`Project name: ${r}`;const s=t(d),l=document.createElement("button");l.innerHTML="Delete Project";const p=document.createElement("button");p.innerHTML="Edit Project",!1===function(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];return t.find((t=>t.projectName===e.projectName))?(alert("Names are the same"),!0):(t.push(e),localStorage.setItem("Projects",JSON.stringify(t)),console.log("Project added successfully"),!1)}(d)&&n.appendChild(i),i.appendChild(a),a.appendChild(c),a.appendChild(l),a.appendChild(p),i.appendChild(s),l.addEventListener("click",(()=>{n.removeChild(i),function(e){const t=JSON.parse(localStorage.getItem("Projects"))||[];console.log(JSON.stringify(t)),console.log(t.length);for(let n=0;n<t.length;n++)t[n].projectName===e.projectName&&(console.log("deleting this"),t.splice(n,1),localStorage.setItem("Projects",JSON.stringify(t)),console.log(t))}(d)})),p.addEventListener("click",(()=>{let e=prompt("enter new project name:");!function(e,t){const n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)n[o].projectName===e.projectName&&(n[o].projectName=t,console.log(n[o].projectName),localStorage.setItem("Projects",JSON.stringify(n)))}(d,e),console.log(e),r=e,d.projectName=r,c.innerHTML=`Project name is: ${r}`,c.appendChild(l),c.appendChild(p)})),o.value="",console.log(d)})),window.onload=function(){!function(e){const o=document.createElement("div");o.setAttribute("id","projectNameDiv");const i=document.createElement("div");i.setAttribute("id","projectHeadline");const a=document.createElement("h3");a.innerHTML=`Project name is: ${e.projectName}`;const c=t(e),r=document.createElement("button");r.innerHTML="Delete Project";const d=document.createElement("button");d.innerHTML="Edit Project",n.appendChild(o),o.appendChild(i),i.appendChild(a),i.appendChild(r),i.appendChild(d),o.appendChild(c),r.addEventListener("click",(()=>{n.removeChild(o)})),d.addEventListener("click",(()=>{let t=prompt("Enter new project name:");console.log(t),e.projectName=t,a.innerHTML=`Project name is: ${t}`,a.appendChild(r),a.appendChild(d)}))}(new e("Default Project"))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,