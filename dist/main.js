(()=>{"use strict";class e{constructor(e){this.projectName=e,this.task=[]}addTask(e){this.task.push(e)}displayTask(e){console.log(this.task[e-1])}getDescription(){return this.task.map((e=>e.description))}getPrio(){return this.task.map((e=>e.priority))}getDueDate(){return this.task.map((e=>e.dueDate))}getID(e){e===this.task.id?console.log("id is: "+task.id):console.log("wrong")}}const t=document.getElementById("content"),n=document.getElementById("projectName"),i=document.getElementById("submit");let d=[];i.addEventListener("click",(()=>{const i=document.createElement("div");i.setAttribute("id","projectNameDiv");const a=document.createElement("h3");let s=n.value,o=new e(s);d.push(o),a.innerHTML=`Project name is: ${s}`;const r=function(e){let t=0;const n=document.createElement("div"),i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("name","setProperty"),i.setAttribute("id","setProperty");const d=document.createElement("label");d.setAttribute("for","setProperty"),d.innerHTML="Task Name:",n.setAttribute("id","taskDiv");const a=document.createElement("select");a.setAttribute("name","setPrio"),a.setAttribute("id","setPrio");const s=document.createElement("option");s.setAttribute("value","high");const o=document.createTextNode("High"),r=document.createElement("option");r.setAttribute("value","medium");const c=document.createTextNode("Medium"),l=document.createElement("option");l.setAttribute("value","low");const p=document.createTextNode("Low");s.appendChild(o),r.appendChild(c),l.appendChild(p),a.appendChild(s),a.appendChild(r),a.appendChild(l);const u=document.createElement("label");u.setAttribute("for","setPrio"),u.innerHTML="Add Priority";const m=document.createElement("input");m.setAttribute("type","date"),m.setAttribute("name","taskDueDate"),m.setAttribute("id","taskDueDate");const h=document.createElement("label");h.setAttribute("for","taskDueDate"),h.innerHTML="Due: ";const k=document.createElement("button");k.innerHTML="add";const E=document.createElement("div");return E.classList.add("taskOptions"),k.addEventListener("click",(()=>{const d=i.value,s=a.value,o=m.value;e.addTask({description:d,priority:s,dueDate:o,id:t++});const r=document.createElement("div");r.classList.add("currentTasks"),r.setAttribute("data-id",t),i.value="",console.log(e),r.innerHTML=`Task name: ${e.getDescription()[t-1]},\n             priority: ${e.getPrio()[t-1]},\n             it is due till ${e.getDueDate()[t-1]}`;const c=document.createElement("button");c.classList.add("deleteTask"),c.setAttribute("data-id",t),c.innerHTML="Delete Task",c.dataset.id;const l=r.dataset.id;c.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)e.task[t].id==l&&e.task.splice(l,1);t--,n.removeChild(r)}));const p=document.createElement("button");p.innerHTML="Edit Task",p.addEventListener("click",(()=>{console.log("task id: "+l);let t=prompt("New Task name:");for(let n=0;n<e.task.length;n++)e.task[n].id==l&&(e.task[l].description=t);r.innerHTML=`Task name: ${e.getDescription()[l]},\n             priority: ${e.getPrio()[l]},\n             it is due till ${e.getDueDate()[l]}`,console.log(e),r.appendChild(c),r.appendChild(p)})),n.appendChild(r),r.appendChild(c),r.appendChild(p)})),E.appendChild(d),E.appendChild(i),E.appendChild(u),E.appendChild(a),E.appendChild(h),E.appendChild(m),E.appendChild(k),n.appendChild(E),n}(o),c=document.createElement("button");c.innerHTML="Delete Project";const l=document.createElement("button");l.innerHTML="Edit Project",t.appendChild(i),i.appendChild(a),a.appendChild(c),a.appendChild(l),i.appendChild(r),c.addEventListener("click",(()=>{t.removeChild(i)})),l.addEventListener("click",(()=>{let e=prompt("enter new project name:");console.log(e),s=e,o.projectName=s,a.innerHTML=`Project name is: ${s}`,a.appendChild(c),a.appendChild(l)})),n.value="",console.log(o)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,