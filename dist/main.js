(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),a=n.n(o),r=n(645),c=n.n(r)()(a());c.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400&display=swap);"]),c.push([e.id,"body, h3, p, input, button, label{\n    padding: 0;\n    margin: 0;\n    font-family: 'Roboto', sans-serif;\n}\n\nbody{\n    background-color: #141010; \n}\n\n#projectAdding{\n    text-align: center;\n    padding: 20px;\n    position: sticky;\n    top: 0;\n    z-index: 100;\n    background-color: #c3195d;\n}\n\n#content{\n    display: grid;\n    grid-template-columns: 1fr 3fr 1fr;\n    justify-items: center;\n    gap: 5%;\n    \n\n    \n}\n\n#content .projectNameDiv:first-child{\n    margin-top: 3%;\n}\n\n\n\n.projectNameDiv{\n   grid-column: 2/3;\n  \n   background-color:  #680747;\n   \n}\n\n.taskDiv{\n    background-color: #c3195d;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,UAAU;IACV,SAAS;IACT,iCAAiC;AACrC;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,gBAAgB;IAChB,MAAM;IACN,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,kCAAkC;IAClC,qBAAqB;IACrB,OAAO;;;;AAIX;;AAEA;IACI,cAAc;AAClB;;;;AAIA;GACG,gBAAgB;;GAEhB,0BAA0B;;AAE7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400&display=swap');\n\nbody, h3, p, input, button, label{\n    padding: 0;\n    margin: 0;\n    font-family: 'Roboto', sans-serif;\n}\n\nbody{\n    background-color: #141010; \n}\n\n#projectAdding{\n    text-align: center;\n    padding: 20px;\n    position: sticky;\n    top: 0;\n    z-index: 100;\n    background-color: #c3195d;\n}\n\n#content{\n    display: grid;\n    grid-template-columns: 1fr 3fr 1fr;\n    justify-items: center;\n    gap: 5%;\n    \n\n    \n}\n\n#content .projectNameDiv:first-child{\n    margin-top: 3%;\n}\n\n\n\n.projectNameDiv{\n   grid-column: 2/3;\n  \n   background-color:  #680747;\n   \n}\n\n.taskDiv{\n    background-color: #c3195d;\n}\n\n"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(c[i]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&c[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},c=[],s=0;s<e.length;s++){var i=e[s],l=o.base?i[0]+o.base:i[0],d=r[l]||0,p="".concat(l," ").concat(d);r[l]=d+1;var u=n(p),m={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var g=a(m,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:g,references:1})}c.push(p)}return c}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var c=0;c<r.length;c++){var s=n(r[c]);t[s].references--}for(var i=o(e,a),l=0;l<r.length;l++){var d=n(r[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{class e{constructor(e){this.projectName=e,this.task=[]}addTask(e){this.task.push(e)}displayTask(e){console.log(this.task[e-1])}getDescription(){return this.task.map((e=>e.description))}getPrio(){return this.task.map((e=>e.priority))}getDueDate(){return this.task.map((e=>e.dueDate))}getID(){return console.log(this.task.map((e=>e.id)))}}function t(){const e=localStorage.getItem("Projects");return e?JSON.parse(e):[]}function o(e){const t=JSON.parse(localStorage.getItem("Projects"))||[];console.log(JSON.stringify(t)),console.log(t.length);for(let n=0;n<t.length;n++)t[n].projectName===e.projectName&&(console.log("deleting this"),t.splice(n,1),localStorage.setItem("Projects",JSON.stringify(t)),console.log(t))}function a(e,t){const n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)n[o].projectName===e.projectName&&(n[o].projectName=t,console.log(n[o].projectName),localStorage.setItem("Projects",JSON.stringify(n)))}function r(e,t){let n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)if(n[o].projectName===t.projectName){const t=n[o].task.findIndex((t=>t.description===e.description));-1!==t?(n[o].task.splice(t,1),console.log("Updated tasks:",n[o].task)):console.log("Task not found:",e)}else console.log("No match for:",t.projectName);localStorage.setItem("Projects",JSON.stringify(n))}function c(e,t,n){let o=JSON.parse(localStorage.getItem("Projects"))||[];for(let a=0;a<o.length;a++)if(o[a].projectName===t.projectName)for(let t=0;t<o[a].task.length;t++)o[a].task[t].description===e.description&&(console.log("match"),o[a].task[t].description=n,localStorage.setItem("Projects",JSON.stringify(o)))}function s(e,t,n,o){let a=JSON.parse(localStorage.getItem("Projects"))||[];for(let r=0;r<a.length;r++)if(a[r].projectName===t.projectName)for(let t=0;t<a[r].task.length;t++)console.log("matching this task and this task"),console.log(a[r].task[t]),console.log(e),a[r].task[t].description===e.description&&(console.log("match"),a[r].task[t].completed=n,localStorage.setItem("Projects",JSON.stringify(a)),console.log("task div"),console.log(o),!0===n&&(console.log("true adding"),o.classList.add("complete")),!1===n&&(console.log("false removing"),o.classList.remove("complete")))}function i(e,n,o,a){t();const r=document.createElement("button");return r.innerHTML="Mark as complete",r.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)if(e.task[t].id==n){if(1==e.task[t].completed){const n=!1;s(e.task[t],e,n,o),e.task[t].completed=!1,o.classList.remove("complete");break}if(0==e.task[t].completed){const n=!0;s(e.task[t],e,n,o),e.task[t].completed=!0,o.classList.add("complete");break}}})),r}function l(e,t,n,o){const a=document.createElement("button");return a.classList.add("deleteTask"),a.innerHTML="Delete Task",a.addEventListener("click",(()=>{for(let n=0;n<e.task.length;n++)e.task[n].id==t&&(r(e.task[n],e),e.task.splice(n,1));o.removeChild(n)})),a}function d(e,t,n,o,a,r){const s=document.createElement("button");return s.innerHTML="Edit Name",s.addEventListener("click",(()=>{let o=prompt("New Task name:");for(let a=0;a<e.task.length;a++)e.task[a].id==t&&(c(e.task[a],e,o),e.task[a].description=o,n.innerHTML=`<div class="taskParaDiv"><p>Task name: <b>${e.getDescription()[a]}</b></p>\n                <p>priority: <b>${e.getPrio()[a]}</b></p>\n                <p>it is due till <b>${e.getDueDate()[a]}</b></p></div>`);console.log(e),n.appendChild(r)})),s}function p(e){let t=0,n=0;const o=document.createElement("div"),a=document.createElement("input");a.setAttribute("type","text"),a.setAttribute("name","setProperty"),a.setAttribute("id","setProperty");const r=document.createElement("label");r.setAttribute("for","setProperty"),r.innerHTML="Task Name:",o.classList.add("taskDiv");const c=document.createElement("select");c.setAttribute("name","setPrio"),c.setAttribute("id","setPrio");const s=document.createElement("option");s.setAttribute("value","High");const p=document.createTextNode("High"),u=document.createElement("option");u.setAttribute("value","Medium");const m=document.createTextNode("Medium"),g=document.createElement("option");g.setAttribute("value","Low");const f=document.createTextNode("Low");s.appendChild(p),u.appendChild(m),g.appendChild(f),c.appendChild(s),c.appendChild(u),c.appendChild(g);const h=document.createElement("label");h.setAttribute("for","setPrio"),h.innerHTML="Add Priority";const A=document.createElement("input");A.setAttribute("type","date"),A.setAttribute("name","taskDueDate"),A.setAttribute("id","taskDueDate"),A.setAttribute("required","");const v=document.createElement("label");v.setAttribute("for","taskDueDate"),v.innerHTML="Due: ";const k=document.createElement("button");k.innerHTML="Add Task";const b=document.createElement("div");return b.classList.add("taskOptions"),console.log("in tasks"),console.log(e),k.addEventListener("click",(()=>{const r=a.value,s=c.value,p=A.value;if(""==r||""==s||""==p)return alert("Fill out all the fields");e.addTask({description:r,priority:s,dueDate:p,completed:!1,id:t++}),n++,function(e,t){let n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)n[o].projectName===t.projectName?n[o].task=e:console.log("we dont match");localStorage.setItem("Projects",JSON.stringify(n))}(e.task,e);const u=document.createElement("div");u.classList.add("currentTasks"),u.setAttribute("data-id",n-1),a.value="",console.log(e);const m=u.dataset.id;console.log(m+"for currenttaskDiv"),u.innerHTML=`<div class="taskParaDiv"><p>Task name: <b>${e.getDescription()[e.task.length-1]}</b></p>\n            <p>Priority: <b>${e.getPrio()[e.task.length-1]}</b></p>\n            <p>It is due till: <b>${e.getDueDate()[e.task.length-1]}</b></p></div>`;const g=document.createElement("div");g.classList.add("taskButtonDiv");const f=i(e,m,u),h=l(e,m,u,o),v=d(e,m,u,0,0,g);o.appendChild(u),u.appendChild(g),g.appendChild(f),g.appendChild(v),g.appendChild(h)})),b.appendChild(r),b.appendChild(a),b.appendChild(h),b.appendChild(c),b.appendChild(v),b.appendChild(A),b.appendChild(k),o.appendChild(b),o}function u(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];if(t.length>0){for(let n=0;n<t.length;n++)if(t[n].projectName===e)return e;return t[t.length-1].projectName}return e}var m=n(379),g=n.n(m),f=n(795),h=n.n(f),A=n(569),v=n.n(A),k=n(565),b=n.n(k),y=n(216),C=n.n(y),j=n(589),E=n.n(j),N=n(426),I={};I.styleTagTransform=E(),I.setAttributes=b(),I.insert=v().bind(null,"head"),I.domAPI=h(),I.insertStyleElement=C(),g()(N.Z,I),N.Z&&N.Z.locals&&N.Z.locals;const L=document.getElementById("content"),P=document.getElementById("projectName"),S=document.getElementById("submit");window.onload=function(){!function(e){const n=t();0===n.length&&(n.push(e),localStorage.setItem("Projects",JSON.stringify(n)))}(new e("Default Project")),t().forEach((t=>{const n=new e(t.projectName);t.task.forEach((e=>{n.addTask({description:e.description,priority:e.priority,dueDate:e.dueDate,completed:e.completed,id:e.id+100})})),console.log("after tasks"),console.log(n),function(e){console.log("here"),console.log(e);const t=document.createElement("div");t.classList.add("projectNameDiv");const n=document.createElement("div");n.setAttribute("id","projectHeadline");const r=document.createElement("div");r.classList.add("projectButtons");const c=document.createElement("h3");c.innerHTML=`Project name: ${u(e.projectName)}`;const s=p(e),m=document.createElement("button");m.innerHTML="Delete Project";const g=document.createElement("button");g.innerHTML="Edit Project",t.appendChild(n),n.appendChild(c),n.appendChild(r),r.appendChild(m),r.appendChild(g),t.appendChild(s),e.task.forEach((t=>{const n=document.createElement("div");n.classList.add("taskButtonDiv");const o=document.createElement("div");o.classList.add("currentTasks"),o.setAttribute("data-id",t.id);const a=o.dataset.id;!0===t.completed&&(console.log("yea this is done"),o.classList.add("complete")),o.innerHTML=`\n            <div class="taskParaDiv"><p>Task name: <b>${t.description}</b></p>\n            <p>Priority: <b>${t.priority}</b></p>\n            <p>It is due till: <b>${t.dueDate}</b></p></div>`;const r=i(e,a,o),c=l(e,a,o,s),p=d(e,a,o);s.appendChild(o),o.appendChild(n),n.appendChild(r),n.appendChild(p),n.appendChild(c)})),m.addEventListener("click",(()=>{L.removeChild(t),o(e)})),g.addEventListener("click",(()=>{let t=prompt("Enter new project name:");a(e,t),c.innerHTML=`Project name: ${u(t)}`})),L.appendChild(t)}(n)}))},S.addEventListener("click",(()=>{const t=document.createElement("div");t.classList.add("projectNameDiv");const n=document.createElement("div");n.setAttribute("id","projectHeadline");const r=document.createElement("div");r.classList.add("projectButtons");const c=document.createElement("h3");let s=P.value,i=new e(s);!1===function(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];return t.find((t=>t.projectName===e.projectName))?(alert("Names are the same"),!0):(t.push(e),localStorage.setItem("Projects",JSON.stringify(t)),console.log("Project added successfully"),!1)}(i)&&(L.appendChild(t),JSON.parse(localStorage.getItem("Projects"))),c.innerHTML="Project name: "+u(s);const l=p(i),d=document.createElement("button");d.innerHTML="Delete Project";const m=document.createElement("button");m.innerHTML="Edit Project",t.appendChild(n),n.appendChild(c),n.appendChild(r),r.appendChild(d),r.appendChild(m),t.appendChild(l),d.addEventListener("click",(()=>{L.removeChild(t),o(i)})),m.addEventListener("click",(()=>{let e=prompt("enter new project name:");a(i,e),console.log(e),s=e,i.projectName=s,c.innerHTML=`Project name is: ${s}`,n.appendChild(r)})),P.value="",console.log(i)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,