(()=>{"use strict";class e{constructor(e){this.projectName=e,this.task=[]}addTask(e){this.task.push(e)}displayTask(e){console.log(this.task[e-1])}getDescription(){return this.task.map((e=>e.description))}getPrio(){return this.task.map((e=>e.priority))}getDueDate(){return this.task.map((e=>e.dueDate))}getID(){return console.log(this.task.map((e=>e.id)))}}function t(){const e=localStorage.getItem("Projects");return e?JSON.parse(e):[]}function o(e){const t=JSON.parse(localStorage.getItem("Projects"))||[];console.log(JSON.stringify(t)),console.log(t.length);for(let o=0;o<t.length;o++)t[o].projectName===e.projectName&&(console.log("deleting this"),t.splice(o,1),localStorage.setItem("Projects",JSON.stringify(t)),console.log(t))}function n(e,t){const o=JSON.parse(localStorage.getItem("Projects"))||[];for(let n=0;n<o.length;n++)o[n].projectName===e.projectName&&(o[n].projectName=t,console.log(o[n].projectName),localStorage.setItem("Projects",JSON.stringify(o)))}function a(e,t){let o=JSON.parse(localStorage.getItem("Projects"))||[];for(let n=0;n<o.length;n++)if(o[n].projectName===t.projectName){const t=o[n].task.findIndex((t=>t.description===e.description));-1!==t?(o[n].task.splice(t,1),console.log("Updated tasks:",o[n].task)):console.log("Task not found:",e)}else console.log("No match for:",t.projectName);localStorage.setItem("Projects",JSON.stringify(o))}function s(e,t,o){let n=JSON.parse(localStorage.getItem("Projects"))||[];for(let a=0;a<n.length;a++)if(n[a].projectName===t.projectName)for(let t=0;t<n[a].task.length;t++)n[a].task[t].description===e.description&&(console.log("match"),n[a].task[t].description=o,localStorage.setItem("Projects",JSON.stringify(n)))}function c(e,t,o,n){let a=JSON.parse(localStorage.getItem("Projects"))||[];for(let s=0;s<a.length;s++)if(a[s].projectName===t.projectName)for(let t=0;t<a[s].task.length;t++)console.log("matching this task and this task"),console.log(a[s].task[t]),console.log(e),a[s].task[t].description===e.description&&(console.log("match"),a[s].task[t].completed=o,localStorage.setItem("Projects",JSON.stringify(a)),console.log("task div"),console.log(n),!0===o&&(console.log("true adding"),n.classList.add("complete")),!1===o&&(console.log("false removing"),n.classList.remove("complete")))}function i(e,o,n,a){t();const s=document.createElement("button");return s.innerHTML="Mark as complete",s.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)if(e.task[t].id==o){if(1==e.task[t].completed){const o=!1;c(e.task[t],e,o,n),e.task[t].completed=!1,n.classList.remove("complete");break}if(0==e.task[t].completed){const o=!0;c(e.task[t],e,o,n),e.task[t].completed=!0,n.classList.add("complete");break}}})),s}function l(e,t,o,n){const s=document.createElement("button");return s.classList.add("deleteTask"),s.innerHTML="Delete Task",s.addEventListener("click",(()=>{for(let n=0;n<e.task.length;n++)e.task[n].id==t&&(a(e.task[n],e),e.task.splice(n,1),o.innerHTML=`Task name: ${e.getDescription()[n]},\n                 priority: ${e.getPrio()[n]},\n                 it is due till ${e.getDueDate()[n]}`);n.removeChild(o)})),s}function r(e,t,o,n,a){const c=document.createElement("button");return c.innerHTML="Edit Name",c.addEventListener("click",(()=>{let c=prompt("New Task name:");for(let n=0;n<e.task.length;n++)e.task[n].id==t&&(s(e.task[n],e,c),e.task[n].description=c,o.innerHTML=`Task name: ${e.getDescription()[n]},\n                 priority: ${e.getPrio()[n]},\n                 it is due till ${e.getDueDate()[n]}`);console.log(e),o.appendChild(i(e,t,o)),o.appendChild(l(e,t,o,a)),o.appendChild(r(e,t,o,n,a))})),c}function d(e){let t=0,o=0;const n=document.createElement("div"),a=document.createElement("input");a.setAttribute("type","text"),a.setAttribute("name","setProperty"),a.setAttribute("id","setProperty");const s=document.createElement("label");s.setAttribute("for","setProperty"),s.innerHTML="Task Name:",n.classList.add("taskDiv");const c=document.createElement("select");c.setAttribute("name","setPrio"),c.setAttribute("id","setPrio");const d=document.createElement("option");d.setAttribute("value","high");const p=document.createTextNode("High"),m=document.createElement("option");m.setAttribute("value","medium");const u=document.createTextNode("Medium"),g=document.createElement("option");g.setAttribute("value","low");const h=document.createTextNode("Low");d.appendChild(p),m.appendChild(u),g.appendChild(h),c.appendChild(d),c.appendChild(m),c.appendChild(g);const k=document.createElement("label");k.setAttribute("for","setPrio"),k.innerHTML="Add Priority";const f=document.createElement("input");f.setAttribute("type","date"),f.setAttribute("name","taskDueDate"),f.setAttribute("id","taskDueDate"),f.setAttribute("required","");const j=document.createElement("label");j.setAttribute("for","taskDueDate"),j.innerHTML="Due: ";const N=document.createElement("button");N.innerHTML="add";const E=document.createElement("div");return E.classList.add("taskOptions"),console.log("in tasks"),console.log(e),N.addEventListener("click",(()=>{const s=a.value,d=c.value,p=f.value;if(""==s||""==d||""==p)return alert("Fill out all the fields");e.addTask({description:s,priority:d,dueDate:p,completed:false,id:t++}),o++,function(e,t){let o=JSON.parse(localStorage.getItem("Projects"))||[];for(let n=0;n<o.length;n++)o[n].projectName===t.projectName?o[n].task=e:console.log("we dont match");localStorage.setItem("Projects",JSON.stringify(o))}(e.task,e);const m=document.createElement("div");m.classList.add("currentTasks"),m.setAttribute("data-id",o-1),a.value="",console.log(e);const u=m.dataset.id;console.log(u+"for currenttaskDiv"),m.innerHTML=`Task name: ${e.getDescription()[e.task.length-1]},\n             priority: ${e.getPrio()[e.task.length-1]},\n             it is due till ${e.getDueDate()[e.task.length-1]}`;const g=i(e,u,m),h=l(e,u,m,n),k=r(e,u,m,false,n);n.appendChild(m),m.appendChild(g),m.appendChild(k),m.appendChild(h)})),E.appendChild(s),E.appendChild(a),E.appendChild(k),E.appendChild(c),E.appendChild(j),E.appendChild(f),E.appendChild(N),n.appendChild(E),n}function p(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];if(t.length>0){for(let o=0;o<t.length;o++)if(t[o].projectName===e)return e;return t[t.length-1].projectName}return e}const m=document.getElementById("content"),u=document.getElementById("projectName"),g=document.getElementById("submit");window.onload=function(){const a=t();!function(e){const o=t();0===o.length&&(o.push(e),localStorage.setItem("Projects",JSON.stringify(o)))}(new e("Default")),a.forEach((t=>{const a=new e(t.projectName);t.task.forEach((e=>{a.addTask({description:e.description,priority:e.priority,dueDate:e.dueDate,completed:e.completed,id:e.id+100})})),console.log("after tasks"),console.log(a),function(e){console.log("here"),console.log(e);const t=document.createElement("div");t.setAttribute("id","projectNameDiv");const a=document.createElement("div");a.setAttribute("id","projectHeadline");const s=document.createElement("h3");s.innerHTML=`Project name: ${p(e.projectName)}`;const c=d(e),u=document.createElement("button");u.innerHTML="Delete Project";const g=document.createElement("button");g.innerHTML="Edit Project",t.appendChild(a),a.appendChild(s),a.appendChild(u),a.appendChild(g),t.appendChild(c),e.task.forEach((t=>{const o=document.createElement("div");o.classList.add("currentTasks"),o.setAttribute("data-id",t.id);const n=o.dataset.id,a=t.completed;!0===a&&(console.log("yea this is done"),o.classList.add("complete")),o.innerHTML=`\n            Task name: ${t.description},\n            priority: ${t.priority},\n            it is due till ${t.dueDate}`;const s=i(e,n,o),d=l(e,n,o,c),p=r(e,n,o,a,c);c.appendChild(o),o.appendChild(s),o.appendChild(p),o.appendChild(d)})),u.addEventListener("click",(()=>{m.removeChild(t),o(e)})),g.addEventListener("click",(()=>{let t=prompt("Enter new project name:");n(e,t),s.innerHTML=`Project name: ${p(t)}`})),m.appendChild(t)}(a)}))},g.addEventListener("click",(()=>{const t=document.createElement("div");t.setAttribute("id","projectNameDiv");const a=document.createElement("div");a.setAttribute("id","projectHeadline");const s=document.createElement("h3");let c=u.value,i=new e(c);!1===function(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];return t.find((t=>t.projectName===e.projectName))?(alert("Names are the same"),!0):(t.push(e),localStorage.setItem("Projects",JSON.stringify(t)),console.log("Project added successfully"),!1)}(i)&&(m.appendChild(t),JSON.parse(localStorage.getItem("Projects"))),s.innerHTML="Project name: "+p(c);const l=d(i),r=document.createElement("button");r.innerHTML="Delete Project";const g=document.createElement("button");g.innerHTML="Edit Project",t.appendChild(a),a.appendChild(s),a.appendChild(r),a.appendChild(g),t.appendChild(l),r.addEventListener("click",(()=>{m.removeChild(t),o(i)})),g.addEventListener("click",(()=>{let e=prompt("enter new project name:");n(i,e),console.log(e),c=e,i.projectName=c,s.innerHTML=`Project name is: ${c}`,s.appendChild(r),s.appendChild(g)})),u.value="",console.log(i)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,