(()=>{"use strict";class e{constructor(e){this.projectName=e,this.task=[]}addTask(e){this.task.push(e)}displayTask(e){console.log(this.task[e-1])}getDescription(){return this.task.map((e=>e.description))}getPrio(){return this.task.map((e=>e.priority))}getDueDate(){return this.task.map((e=>e.dueDate))}getID(){return console.log(this.task.map((e=>e.id)))}}function t(e,t){let n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)if(n[o].projectName===t.projectName){const t=n[o].task.findIndex((t=>t.id===e.id));-1!==t?(n[o].task.splice(t,1),console.log("Updated tasks:",n[o].task)):console.log("Task not found:",e)}else console.log("No match for:",t.projectName);localStorage.setItem("Projects",JSON.stringify(n))}function n(e,t,n){let o=JSON.parse(localStorage.getItem("Projects"))||[];for(let a=0;a<o.length;a++)o[a].projectName===t.projectName?-1!==o[a].task.findIndex((t=>t.id===e.id))&&(o[a].task.description=n,console.log("Updated tasks:",o[a].task)):console.log("No match for:",t.projectName);localStorage.setItem("Projects",JSON.stringify(o))}function o(e){let o=0,a=0;const i=document.createElement("div"),c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("name","setProperty"),c.setAttribute("id","setProperty");const s=document.createElement("label");s.setAttribute("for","setProperty"),s.innerHTML="Task Name:",i.classList.add("taskDiv");const r=document.createElement("select");r.setAttribute("name","setPrio"),r.setAttribute("id","setPrio");const l=document.createElement("option");l.setAttribute("value","high");const d=document.createTextNode("High"),p=document.createElement("option");p.setAttribute("value","medium");const m=document.createTextNode("Medium"),u=document.createElement("option");u.setAttribute("value","low");const g=document.createTextNode("Low");l.appendChild(d),p.appendChild(m),u.appendChild(g),r.appendChild(l),r.appendChild(p),r.appendChild(u);const h=document.createElement("label");h.setAttribute("for","setPrio"),h.innerHTML="Add Priority";const k=document.createElement("input");k.setAttribute("type","date"),k.setAttribute("name","taskDueDate"),k.setAttribute("id","taskDueDate"),k.setAttribute("required","");const j=document.createElement("label");j.setAttribute("for","taskDueDate"),j.innerHTML="Due: ";const N=document.createElement("button");N.innerHTML="add";const E=document.createElement("div");return E.classList.add("taskOptions"),N.addEventListener("click",(()=>{const s=c.value,l=r.value,d=k.value;e.addTask({description:s,priority:l,dueDate:d,id:o++}),a++,function(e,t){let n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)n[o].projectName===t.projectName?n[o].task=e:console.log("we dont match");localStorage.setItem("Projects",JSON.stringify(n))}(e.task,e);const p=document.createElement("div");p.classList.add("currentTasks"),p.setAttribute("data-id",a-1),c.value="",console.log(e);const m=p.dataset.id;console.log(m+"for currenttaskDiv"),p.innerHTML=`Task name: ${e.getDescription()[e.task.length-1]},\n             priority: ${e.getPrio()[e.task.length-1]},\n             it is due till ${e.getDueDate()[e.task.length-1]}`;const u=document.createElement("button");u.innerHTML="Mark as complete",u.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)e.task[t].id==m&&(p.classList.contains("complete")?p.classList.remove("complete"):p.classList.add("complete"))}));const g=document.createElement("button");g.classList.add("deleteTask"),g.innerHTML="Delete Task",g.addEventListener("click",(()=>{for(let n=0;n<e.task.length;n++)e.task[n].id==m&&(t(e.task[n],e),e.task.splice(n,1),p.innerHTML=`Task name: ${e.getDescription()[n]},\n                     priority: ${e.getPrio()[n]},\n                     it is due till ${e.getDueDate()[n]}`);i.removeChild(p)}));const h=document.createElement("button");h.innerHTML="Edit Name",h.addEventListener("click",(()=>{let t=prompt("New Task name:");for(let o=0;o<e.task.length;o++)e.task[o].id==m&&(n(e.task[o],e,t),e.task[o].description=t,p.innerHTML=`Task name: ${e.getDescription()[o]},\n                     priority: ${e.getPrio()[o]},\n                     it is due till ${e.getDueDate()[o]}`);console.log(e),p.appendChild(u),p.appendChild(h),p.appendChild(g)})),i.appendChild(p),p.appendChild(u),p.appendChild(h),p.appendChild(g)})),E.appendChild(s),E.appendChild(c),E.appendChild(h),E.appendChild(r),E.appendChild(j),E.appendChild(k),E.appendChild(N),i.appendChild(E),i}const a=document.getElementById("content"),i=document.getElementById("projectName");document.getElementById("submit").addEventListener("click",(()=>{const t=document.createElement("div");t.setAttribute("id","projectNameDiv");const n=document.createElement("div");n.setAttribute("id","projectHeadline");const c=document.createElement("h3");let s=i.value,r=new e(s);c.innerHTML=`Project name: ${s}`;const l=o(r),d=document.createElement("button");d.innerHTML="Delete Project";const p=document.createElement("button");p.innerHTML="Edit Project",!1===function(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];return t.find((t=>t.projectName===e.projectName))?(alert("Names are the same"),!0):(t.push(e),localStorage.setItem("Projects",JSON.stringify(t)),console.log("Project added successfully"),!1)}(r)&&a.appendChild(t),t.appendChild(n),n.appendChild(c),n.appendChild(d),n.appendChild(p),t.appendChild(l),d.addEventListener("click",(()=>{a.removeChild(t),function(e){const t=JSON.parse(localStorage.getItem("Projects"))||[];console.log(JSON.stringify(t)),console.log(t.length);for(let n=0;n<t.length;n++)t[n].projectName===e.projectName&&(console.log("deleting this"),t.splice(n,1),localStorage.setItem("Projects",JSON.stringify(t)),console.log(t))}(r)})),p.addEventListener("click",(()=>{let e=prompt("enter new project name:");!function(e,t){const n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)n[o].projectName===e.projectName&&(n[o].projectName=t,console.log(n[o].projectName),localStorage.setItem("Projects",JSON.stringify(n)))}(r,e),console.log(e),s=e,r.projectName=s,c.innerHTML=`Project name is: ${s}`,c.appendChild(d),c.appendChild(p)})),i.value="",console.log(r)})),window.onload=function(){!function(e){const t=document.createElement("div");t.setAttribute("id","projectNameDiv");const n=document.createElement("div");n.setAttribute("id","projectHeadline");const i=document.createElement("h3");i.innerHTML=`Project name is: ${e.projectName}`;const c=o(e),s=document.createElement("button");s.innerHTML="Delete Project";const r=document.createElement("button");r.innerHTML="Edit Project",a.appendChild(t),t.appendChild(n),n.appendChild(i),n.appendChild(s),n.appendChild(r),t.appendChild(c),s.addEventListener("click",(()=>{a.removeChild(t)})),r.addEventListener("click",(()=>{let t=prompt("Enter new project name:");console.log(t),e.projectName=t,i.innerHTML=`Project name is: ${t}`,i.appendChild(s),i.appendChild(r)}))}(new e("Default Project"))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,