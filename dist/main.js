(()=>{"use strict";class e{constructor(e){this.projectName=e,this.task=[]}addTask(e){this.task.push(e)}displayTask(e){console.log(this.task[e-1])}getDescription(){return this.task.map((e=>e.description))}getPrio(){return this.task.map((e=>e.priority))}getDueDate(){return this.task.map((e=>e.dueDate))}getID(){return console.log(this.task.map((e=>e.id)))}}const t=document.getElementById("content"),n=document.getElementById("projectName");document.getElementById("submit").addEventListener("click",(()=>{const i=document.createElement("div");i.setAttribute("id","projectNameDiv");const a=document.createElement("h3");let d=n.value,s=new e(d);a.innerHTML=`Project name is: ${d}`;const o=function(e){let t=0,n=0;const i=document.createElement("div"),a=document.createElement("input");a.setAttribute("type","text"),a.setAttribute("name","setProperty"),a.setAttribute("id","setProperty");const d=document.createElement("label");d.setAttribute("for","setProperty"),d.innerHTML="Task Name:",i.setAttribute("id","taskDiv");const s=document.createElement("select");s.setAttribute("name","setPrio"),s.setAttribute("id","setPrio");const o=document.createElement("option");o.setAttribute("value","high");const r=document.createTextNode("High"),c=document.createElement("option");c.setAttribute("value","medium");const l=document.createTextNode("Medium"),p=document.createElement("option");p.setAttribute("value","low");const u=document.createTextNode("Low");o.appendChild(r),c.appendChild(l),p.appendChild(u),s.appendChild(o),s.appendChild(c),s.appendChild(p);const m=document.createElement("label");m.setAttribute("for","setPrio"),m.innerHTML="Add Priority";const h=document.createElement("input");h.setAttribute("type","date"),h.setAttribute("name","taskDueDate"),h.setAttribute("id","taskDueDate");const k=document.createElement("label");k.setAttribute("for","taskDueDate"),k.innerHTML="Due: ";const g=document.createElement("button");g.innerHTML="add";const E=document.createElement("div");return E.classList.add("taskOptions"),g.addEventListener("click",(()=>{const d=a.value,o=s.value,r=h.value;e.addTask({description:d,priority:o,dueDate:r,id:t++}),n++;const c=document.createElement("div");c.classList.add("currentTasks"),c.setAttribute("data-id",n-1),a.value="",console.log(e);const l=c.dataset.id;console.log(l+"for currenttaskDiv"),c.innerHTML=`Task name: ${e.getDescription()[e.task.length-1]},\n             priority: ${e.getPrio()[e.task.length-1]},\n             it is due till ${e.getDueDate()[e.task.length-1]}`;const p=document.createElement("button");p.classList.add("deleteTask"),p.innerHTML="Delete Task",p.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)e.task[t].id==l&&(e.task.splice(t,1),c.innerHTML=`Task name: ${e.getDescription()[t]},\n                     priority: ${e.getPrio()[t]},\n                     it is due till ${e.getDueDate()[t]}`);i.removeChild(c)}));const u=document.createElement("button");u.innerHTML="Edit Task",u.addEventListener("click",(()=>{let t=prompt("New Task name:");for(let n=0;n<e.task.length;n++)e.task[n].id==l&&(e.task[n].description=t,c.innerHTML=`Task name: ${e.getDescription()[n]},\n                     priority: ${e.getPrio()[n]},\n                     it is due till ${e.getDueDate()[n]}`);console.log(e),c.appendChild(p),c.appendChild(u)})),i.appendChild(c),c.appendChild(p),c.appendChild(u)})),E.appendChild(d),E.appendChild(a),E.appendChild(m),E.appendChild(s),E.appendChild(k),E.appendChild(h),E.appendChild(g),i.appendChild(E),i}(s),r=document.createElement("button");r.innerHTML="Delete Project";const c=document.createElement("button");c.innerHTML="Edit Project",t.appendChild(i),i.appendChild(a),a.appendChild(r),a.appendChild(c),i.appendChild(o),r.addEventListener("click",(()=>{t.removeChild(i)})),c.addEventListener("click",(()=>{let e=prompt("enter new project name:");console.log(e),d=e,s.projectName=d,a.innerHTML=`Project name is: ${d}`,a.appendChild(r),a.appendChild(c)})),n.value="",console.log(s)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxFQUFZSixPQUFPLDJCQUN2QjFELFFBQVFDLElBQUk2RCxHQUNaMUMsRUFBWTBDLEVBQ1p4QyxFQUFpQjlCLFlBQWM0QixFQUUvQkQsRUFBVUksVUFBWSxvQkFBb0JILElBRTFDRCxFQUFVa0IsWUFBWXVCLEdBQ3RCekMsRUFBVWtCLFlBQVl3QixFQUFlLElBR3pDL0MsRUFBZ0JPLE1BQVEsR0FDeEJyQixRQUFRQyxJQUFJcUIsRUFBaUIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tdG9wLy4vc3JjL2NvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tdG9wLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tdG9wLy4vc3JjL3Rhc2tzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQcm9qZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9qZWN0TmFtZSl7XG4gICAgICAgIHRoaXMucHJvamVjdE5hbWUgPSBwcm9qZWN0TmFtZTtcbiAgICAgICAgdGhpcy50YXNrID0gW107XG4gICAgfVxuXG4gICAgYWRkVGFzayhuZXdUYXNrKXtcbiAgICAgICAgdGhpcy50YXNrLnB1c2gobmV3VGFzayk7XG4gICAgfVxuXG4gICAgZGlzcGxheVRhc2soaW5kZXgpe1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnRhc2tbaW5kZXgtMV0pXG4gICAgfVxuXG4gICAgZ2V0RGVzY3JpcHRpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFzay5tYXAodGFzayA9PiB0YXNrLmRlc2NyaXB0aW9uKTsgXG4gICAgfVxuXG4gICAgZ2V0UHJpbygpe1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrLm1hcCh0YXNrID0+IHRhc2sucHJpb3JpdHkpOyBcbiAgICB9XG5cbiAgICBnZXREdWVEYXRlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnRhc2subWFwKHRhc2sgPT4gdGFzay5kdWVEYXRlKTsgXG4gICAgfVxuXG4gICAgZ2V0SUQoKXtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKHRoaXMudGFzay5tYXAodGFzayA9PiB0YXNrLmlkKSk7XG59XG59IiwiaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL2NvbnN0cnVjdG9yXCI7XG5pbXBvcnQgeyBjcmVhdGVUYXNrIH0gZnJvbSBcIi4vdGFza3NcIjtcblxuY29uc3QgY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudFwiKTtcbmNvbnN0IHByb2plY3ROYW1lRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdE5hbWVcIik7XG5jb25zdCBzdWJCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1Ym1pdFwiKTtcblxuXG5zdWJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT57XG4gICAgLy9ET00gZm9yIGFkZGluZyBwcm9qZWN0c1xuICAgIGNvbnN0IHByb2plY3ROYW1lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBwcm9qZWN0TmFtZURpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInByb2plY3ROYW1lRGl2XCIpO1xuICAgIGNvbnN0IHByb2plY3RIMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgICBsZXQgdGhlTmFtZUlzID0gcHJvamVjdE5hbWVGb3JtLnZhbHVlO1xuICAgIGxldCBjcmVhdGVOZXdQcm9qZWN0ID0gbmV3IFByb2plY3QodGhlTmFtZUlzKTtcblxuXG4gICAgcHJvamVjdEgzLmlubmVySFRNTCA9IGBQcm9qZWN0IG5hbWUgaXM6ICR7dGhlTmFtZUlzfWA7XG5cbiAgICBjb25zdCB0YXNrRGl2ID0gY3JlYXRlVGFzayhjcmVhdGVOZXdQcm9qZWN0KTtcblxuICAgIGNvbnN0IHJlbW92ZVByb2plY3RCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHJlbW92ZVByb2plY3RCdG4uaW5uZXJIVE1MID0gXCJEZWxldGUgUHJvamVjdFwiOyAgIFxuXG4gICAgY29uc3QgZWRpdFByb2plY3RCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGVkaXRQcm9qZWN0QnRuLmlubmVySFRNTCA9IFwiRWRpdCBQcm9qZWN0XCI7XG5cbiAgICBjb250ZW50LmFwcGVuZENoaWxkKHByb2plY3ROYW1lRGl2KTtcbiAgICBwcm9qZWN0TmFtZURpdi5hcHBlbmRDaGlsZChwcm9qZWN0SDMpO1xuICAgIHByb2plY3RIMy5hcHBlbmRDaGlsZChyZW1vdmVQcm9qZWN0QnRuKTtcbiAgICBwcm9qZWN0SDMuYXBwZW5kQ2hpbGQoZWRpdFByb2plY3RCdG4pO1xuICAgIHByb2plY3ROYW1lRGl2LmFwcGVuZENoaWxkKHRhc2tEaXYpO1xuXG4gICAgcmVtb3ZlUHJvamVjdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKT0+e1xuICAgICAgICBjb250ZW50LnJlbW92ZUNoaWxkKHByb2plY3ROYW1lRGl2KTtcbiAgICB9KVxuXG4gICAgZWRpdFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT57XG4gICAgICAgIGxldCBuZXdOYW1lSXMgPSBwcm9tcHQoXCJlbnRlciBuZXcgcHJvamVjdCBuYW1lOlwiKTtcbiAgICAgICAgY29uc29sZS5sb2cobmV3TmFtZUlzKTtcbiAgICAgICAgdGhlTmFtZUlzID0gbmV3TmFtZUlzO1xuICAgICAgICBjcmVhdGVOZXdQcm9qZWN0LnByb2plY3ROYW1lID0gdGhlTmFtZUlzO1xuXG4gICAgICAgIHByb2plY3RIMy5pbm5lckhUTUwgPSBgUHJvamVjdCBuYW1lIGlzOiAke3RoZU5hbWVJc31gO1xuXG4gICAgICAgIHByb2plY3RIMy5hcHBlbmRDaGlsZChyZW1vdmVQcm9qZWN0QnRuKTtcbiAgICAgICAgcHJvamVjdEgzLmFwcGVuZENoaWxkKGVkaXRQcm9qZWN0QnRuKTtcbiAgICB9KVxuICAgIFxuICAgIHByb2plY3ROYW1lRm9ybS52YWx1ZSA9IFwiXCI7XG4gICAgY29uc29sZS5sb2coY3JlYXRlTmV3UHJvamVjdCk7XG59KTtcblxuXG5cblxuIiwiaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL2NvbnN0cnVjdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYXNrKGNyZWF0ZU5ld1Byb2plY3Qpe1xuICAgIGxldCBkYXRhQ291bnRlciA9IDA7XG4gICAgbGV0IHRhc2tDb3VudGVyID0gMDtcblxuICAgIGNvbnN0IHRhc2tEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIFxuICAgIC8vRE9NIGZvciBhZGRpbmcgVGFza3MgaW50byBQcm9qZWN0c1xuICAgIGNvbnN0IGFkZFRhc2tGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGFkZFRhc2tGb3JtLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgIGFkZFRhc2tGb3JtLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJzZXRQcm9wZXJ0eVwiKTtcbiAgICBhZGRUYXNrRm9ybS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNldFByb3BlcnR5XCIpO1xuICAgIFxuICAgIGNvbnN0IGFkZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGFkZExhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcInNldFByb3BlcnR5XCIpO1xuICAgIGFkZExhYmVsLmlubmVySFRNTCA9IFwiVGFzayBOYW1lOlwiO1xuICAgIFxuICAgIHRhc2tEaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0YXNrRGl2XCIpO1xuICAgIFxuICAgIC8vRE9NIGZvciBhZGRpbmcgcHJpb3JpdHkgb24gVGFza3NcbiAgICBjb25zdCBhZGRQcmlvRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7ICBcbiAgICBhZGRQcmlvRm9ybS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwic2V0UHJpb1wiKTtcbiAgICBhZGRQcmlvRm9ybS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNldFByaW9cIik7XG4gICAgXG4gICAgY29uc3Qgb3B0aW9uc0hpZ2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgIG9wdGlvbnNIaWdoLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiaGlnaFwiKTtcbiAgICBjb25zdCBvcHRpb25zVGV4dEhpZ2ggPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIkhpZ2hcIik7XG4gICAgXG4gICAgY29uc3Qgb3B0aW9uc01lZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgb3B0aW9uc01lZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIm1lZGl1bVwiKTtcbiAgICBjb25zdCBvcHRpb25zVGV4dE1lZCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiTWVkaXVtXCIpO1xuICAgIFxuICAgIGNvbnN0IG9wdGlvbnNMb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgIG9wdGlvbnNMb3cuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJsb3dcIik7XG4gICAgY29uc3Qgb3B0aW9uc1RleHRMb3cgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIkxvd1wiKTtcbiAgICBcbiAgICBvcHRpb25zSGlnaC5hcHBlbmRDaGlsZChvcHRpb25zVGV4dEhpZ2gpO1xuICAgIG9wdGlvbnNNZWQuYXBwZW5kQ2hpbGQob3B0aW9uc1RleHRNZWQpO1xuICAgIG9wdGlvbnNMb3cuYXBwZW5kQ2hpbGQob3B0aW9uc1RleHRMb3cpO1xuICAgIGFkZFByaW9Gb3JtLmFwcGVuZENoaWxkKG9wdGlvbnNIaWdoKTtcbiAgICBhZGRQcmlvRm9ybS5hcHBlbmRDaGlsZChvcHRpb25zTWVkKTtcbiAgICBhZGRQcmlvRm9ybS5hcHBlbmRDaGlsZChvcHRpb25zTG93KTtcbiAgICBcbiAgICBjb25zdCBhZGRMYWJlbFByaW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgYWRkTGFiZWxQcmlvLnNldEF0dHJpYnV0ZShcImZvclwiLCBcInNldFByaW9cIik7XG4gICAgYWRkTGFiZWxQcmlvLmlubmVySFRNTCA9IFwiQWRkIFByaW9yaXR5XCI7XG4gICAgXG4gICAgLy9ET00gZm9yIGFkZGluZyBkdWUgZGF0ZSBvbiB0YXNrc1xuICAgIGNvbnN0IGFkZFRhc2tEdWVEYXRlRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBhZGRUYXNrRHVlRGF0ZUZvcm0uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImRhdGVcIik7XG4gICAgYWRkVGFza0R1ZURhdGVGb3JtLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJ0YXNrRHVlRGF0ZVwiKTtcbiAgICBhZGRUYXNrRHVlRGF0ZUZvcm0uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0YXNrRHVlRGF0ZVwiKTtcbiAgICBcbiAgICBjb25zdCBhZGRUYXNrRHVlRGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgIGFkZFRhc2tEdWVEYXRlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwidGFza0R1ZURhdGVcIik7XG4gICAgYWRkVGFza0R1ZURhdGVMYWJlbC5pbm5lckhUTUwgPSBcIkR1ZTogXCI7XG4gICAgXG4gICAgLy9ET00gZm9yIGFkZGluZyBidXR0b24gdG8gYWRkIFRhc2tzXG4gICAgY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBhZGRCdXR0b24uaW5uZXJIVE1MID0gXCJhZGRcIlxuXG4gICAgLy9ET00gZm9yIGFkZGluZyB0YXNrcyBvcHRpb25zIGludG8gYSBkaXZcbiAgICBjb25zdCB0YXNrT3B0aW9uc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGFza09wdGlvbnNEaXYuY2xhc3NMaXN0LmFkZChcInRhc2tPcHRpb25zXCIpICAgICAgXG4gICAgICAgIFxuICAgIC8vVGFza3MgYmVpbmcgYWRkZWQgdG8gYXJyYXlcbiAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT57XG4gICAgICAgIGNvbnN0IHRhc2tWYWx1ZSA9IGFkZFRhc2tGb3JtLnZhbHVlO1xuICAgICAgICBjb25zdCBwcmlvVmFsdWUgPSBhZGRQcmlvRm9ybS52YWx1ZTtcbiAgICAgICAgY29uc3QgZHVlRGF0ZVZhbHVlID0gYWRkVGFza0R1ZURhdGVGb3JtLnZhbHVlO1xuICAgIFxuICAgICAgICAgY3JlYXRlTmV3UHJvamVjdC5hZGRUYXNrKHsgXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGFza1ZhbHVlLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByaW9WYWx1ZSxcbiAgICAgICAgICAgIGR1ZURhdGU6IGR1ZURhdGVWYWx1ZSxcbiAgICAgICAgICAgIGlkOiBkYXRhQ291bnRlcisrLFxuICAgICAgICB9KTtcbiAgICAgICAgdGFza0NvdW50ZXIrKztcblxuICAgICAgICAvL0RPTSBmb3IgZGlzcGxheWluZyB0YXNrc1xuICAgICAgICBjb25zdCBjdXJyZW50VGFza3NEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjdXJyZW50VGFza3NEaXYuY2xhc3NMaXN0LmFkZChcImN1cnJlbnRUYXNrc1wiKTtcbiAgICAgICAgY3VycmVudFRhc2tzRGl2LnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgdGFza0NvdW50ZXIgLTEpO1xuICAgICAgICAgICAgXG4gICAgICAgIGFkZFRhc2tGb3JtLnZhbHVlID0gXCJcIjtcbiAgICAgICAgY29uc29sZS5sb2coY3JlYXRlTmV3UHJvamVjdCk7XG5cbiAgICAgICAgY29uc3QgZ2V0VGFza0RpdklkID0gY3VycmVudFRhc2tzRGl2LmRhdGFzZXQuaWQ7XG5cbiAgICAgICAgY29uc29sZS5sb2coZ2V0VGFza0RpdklkICsgXCJmb3IgY3VycmVudHRhc2tEaXZcIilcbiAgICAgICAgY3VycmVudFRhc2tzRGl2LmlubmVySFRNTCA9IFxuICAgICAgICAgICAgYFRhc2sgbmFtZTogJHtjcmVhdGVOZXdQcm9qZWN0LmdldERlc2NyaXB0aW9uKClbY3JlYXRlTmV3UHJvamVjdC50YXNrLmxlbmd0aCAtMV19LFxuICAgICAgICAgICAgIHByaW9yaXR5OiAke2NyZWF0ZU5ld1Byb2plY3QuZ2V0UHJpbygpW2NyZWF0ZU5ld1Byb2plY3QudGFzay5sZW5ndGggLTFdfSxcbiAgICAgICAgICAgICBpdCBpcyBkdWUgdGlsbCAke2NyZWF0ZU5ld1Byb2plY3QuZ2V0RHVlRGF0ZSgpW2NyZWF0ZU5ld1Byb2plY3QudGFzay5sZW5ndGggLTFdfWA7XG5cbiAgICAgICAgLy9EZWxldGluZyBUYXNrc1xuICAgICAgICBjb25zdCBkZWxldGVUYXNrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgZGVsZXRlVGFza0J1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGVsZXRlVGFza1wiKTtcbiAgICAgICAgZGVsZXRlVGFza0J1dHRvbi5pbm5lckhUTUwgPSBcIkRlbGV0ZSBUYXNrXCI7XG5cbiAgICAgICAgZGVsZXRlVGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCk9PntcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3JlYXRlTmV3UHJvamVjdC50YXNrLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBpZihjcmVhdGVOZXdQcm9qZWN0LnRhc2tbaV0uaWQgPT0gZ2V0VGFza0RpdklkKXtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlTmV3UHJvamVjdC50YXNrLnNwbGljZShpLDEpOyAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGFza3NEaXYuaW5uZXJIVE1MID0gXG4gICAgICAgICAgICAgICAgICAgIGBUYXNrIG5hbWU6ICR7Y3JlYXRlTmV3UHJvamVjdC5nZXREZXNjcmlwdGlvbigpW2ldfSxcbiAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiAke2NyZWF0ZU5ld1Byb2plY3QuZ2V0UHJpbygpW2ldfSxcbiAgICAgICAgICAgICAgICAgICAgIGl0IGlzIGR1ZSB0aWxsICR7Y3JlYXRlTmV3UHJvamVjdC5nZXREdWVEYXRlKClbaV19YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXNrRGl2LnJlbW92ZUNoaWxkKGN1cnJlbnRUYXNrc0RpdikgICBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9FZGl0aW5nIHRhc2tzXG4gICAgICAgIGNvbnN0IGVkaXRUYXNrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgZWRpdFRhc2tCdXR0b24uaW5uZXJIVE1MID0gXCJFZGl0IFRhc2tcIjtcblxuICAgICAgICBlZGl0VGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCk9PntcbiAgICAgICAgICAgIGxldCBlZGl0VGFza05hbWUgPSBwcm9tcHQoXCJOZXcgVGFzayBuYW1lOlwiKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcmVhdGVOZXdQcm9qZWN0LnRhc2subGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmKGNyZWF0ZU5ld1Byb2plY3QudGFza1tpXS5pZCA9PSBnZXRUYXNrRGl2SWQpe1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVOZXdQcm9qZWN0LnRhc2tbaV0uZGVzY3JpcHRpb24gPSBlZGl0VGFza05hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRhc2tzRGl2LmlubmVySFRNTCA9IFxuICAgICAgICAgICAgICAgICAgICBgVGFzayBuYW1lOiAke2NyZWF0ZU5ld1Byb2plY3QuZ2V0RGVzY3JpcHRpb24oKVtpXX0sXG4gICAgICAgICAgICAgICAgICAgICBwcmlvcml0eTogJHtjcmVhdGVOZXdQcm9qZWN0LmdldFByaW8oKVtpXX0sXG4gICAgICAgICAgICAgICAgICAgICBpdCBpcyBkdWUgdGlsbCAke2NyZWF0ZU5ld1Byb2plY3QuZ2V0RHVlRGF0ZSgpW2ldfWA7ICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhjcmVhdGVOZXdQcm9qZWN0KVxuXG4gICAgICAgIGN1cnJlbnRUYXNrc0Rpdi5hcHBlbmRDaGlsZChkZWxldGVUYXNrQnV0dG9uKTtcbiAgICAgICAgY3VycmVudFRhc2tzRGl2LmFwcGVuZENoaWxkKGVkaXRUYXNrQnV0dG9uKTtcbiAgICAgICAgfSlcblxuICAgICAgICB0YXNrRGl2LmFwcGVuZENoaWxkKGN1cnJlbnRUYXNrc0Rpdik7XG4gICAgICAgIGN1cnJlbnRUYXNrc0Rpdi5hcHBlbmRDaGlsZChkZWxldGVUYXNrQnV0dG9uKTtcbiAgICAgICAgY3VycmVudFRhc2tzRGl2LmFwcGVuZENoaWxkKGVkaXRUYXNrQnV0dG9uKTtcbn0pXG4gXG4gICAgdGFza09wdGlvbnNEaXYuYXBwZW5kQ2hpbGQoYWRkTGFiZWwpO1xuICAgIHRhc2tPcHRpb25zRGl2LmFwcGVuZENoaWxkKGFkZFRhc2tGb3JtKTtcbiAgICB0YXNrT3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChhZGRMYWJlbFByaW8pO1xuICAgIHRhc2tPcHRpb25zRGl2LmFwcGVuZENoaWxkKGFkZFByaW9Gb3JtKTtcbiAgICB0YXNrT3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChhZGRUYXNrRHVlRGF0ZUxhYmVsKTtcbiAgICB0YXNrT3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChhZGRUYXNrRHVlRGF0ZUZvcm0pO1xuICAgIHRhc2tPcHRpb25zRGl2LmFwcGVuZENoaWxkKGFkZEJ1dHRvbik7XG4gICAgdGFza0Rpdi5hcHBlbmRDaGlsZCh0YXNrT3B0aW9uc0Rpdik7XG5cbiAgICByZXR1cm4gdGFza0Rpdjtcbn0iXSwibmFtZXMiOlsiUHJvamVjdCIsImNvbnN0cnVjdG9yIiwicHJvamVjdE5hbWUiLCJ0aGlzIiwidGFzayIsImFkZFRhc2siLCJuZXdUYXNrIiwicHVzaCIsImRpc3BsYXlUYXNrIiwiaW5kZXgiLCJjb25zb2xlIiwibG9nIiwiZ2V0RGVzY3JpcHRpb24iLCJtYXAiLCJkZXNjcmlwdGlvbiIsImdldFByaW8iLCJwcmlvcml0eSIsImdldER1ZURhdGUiLCJkdWVEYXRlIiwiZ2V0SUQiLCJpZCIsImNvbnRlbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicHJvamVjdE5hbWVGb3JtIiwiYWRkRXZlbnRMaXN0ZW5lciIsInByb2plY3ROYW1lRGl2IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInByb2plY3RIMyIsInRoZU5hbWVJcyIsInZhbHVlIiwiY3JlYXRlTmV3UHJvamVjdCIsImlubmVySFRNTCIsInRhc2tEaXYiLCJkYXRhQ291bnRlciIsInRhc2tDb3VudGVyIiwiYWRkVGFza0Zvcm0iLCJhZGRMYWJlbCIsImFkZFByaW9Gb3JtIiwib3B0aW9uc0hpZ2giLCJvcHRpb25zVGV4dEhpZ2giLCJjcmVhdGVUZXh0Tm9kZSIsIm9wdGlvbnNNZWQiLCJvcHRpb25zVGV4dE1lZCIsIm9wdGlvbnNMb3ciLCJvcHRpb25zVGV4dExvdyIsImFwcGVuZENoaWxkIiwiYWRkTGFiZWxQcmlvIiwiYWRkVGFza0R1ZURhdGVGb3JtIiwiYWRkVGFza0R1ZURhdGVMYWJlbCIsImFkZEJ1dHRvbiIsInRhc2tPcHRpb25zRGl2IiwiY2xhc3NMaXN0IiwiYWRkIiwidGFza1ZhbHVlIiwicHJpb1ZhbHVlIiwiZHVlRGF0ZVZhbHVlIiwiY3VycmVudFRhc2tzRGl2IiwiZ2V0VGFza0RpdklkIiwiZGF0YXNldCIsImxlbmd0aCIsImRlbGV0ZVRhc2tCdXR0b24iLCJpIiwic3BsaWNlIiwicmVtb3ZlQ2hpbGQiLCJlZGl0VGFza0J1dHRvbiIsImVkaXRUYXNrTmFtZSIsInByb21wdCIsImNyZWF0ZVRhc2siLCJyZW1vdmVQcm9qZWN0QnRuIiwiZWRpdFByb2plY3RCdG4iLCJuZXdOYW1lSXMiXSwic291cmNlUm9vdCI6IiJ9