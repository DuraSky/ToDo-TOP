(()=>{"use strict";class e{constructor(e){this.projectName=e,this.task=[]}addTask(e){this.task.push(e)}displayTask(e){console.log(this.task[e-1])}getDescription(){return this.task.map((e=>e.description))}getPrio(){return this.task.map((e=>e.priority))}getDueDate(){return this.task.map((e=>e.dueDate))}getID(){return console.log(this.task.map((e=>e.id)))}}function t(e){const t=JSON.parse(localStorage.getItem("Projects"))||[];console.log(JSON.stringify(t)),console.log(t.length);for(let n=0;n<t.length;n++)t[n].projectName===e.projectName&&(console.log("deleting this"),t.splice(n,1),localStorage.setItem("Projects",JSON.stringify(t)),console.log(t))}function n(e,t){const n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)n[o].projectName===e.projectName&&(n[o].projectName=t,console.log(n[o].projectName),localStorage.setItem("Projects",JSON.stringify(n)))}function o(e,t){let n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)if(n[o].projectName===t.projectName){const t=n[o].task.findIndex((t=>t.id===e.id));-1!==t?(n[o].task.splice(t,1),console.log("Updated tasks:",n[o].task)):console.log("Task not found:",e)}else console.log("No match for:",t.projectName);localStorage.setItem("Projects",JSON.stringify(n))}function a(e,t,n){let o=JSON.parse(localStorage.getItem("Projects"))||[];for(let a=0;a<o.length;a++)if(o[a].projectName===t.projectName)for(let t=0;t<o[a].task.length;t++)o[a].task[t].id===e.id&&(console.log("match"),o[a].task[t].description=n,localStorage.setItem("Projects",JSON.stringify(o)))}function s(e){let t=0,n=0;const s=document.createElement("div"),c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("name","setProperty"),c.setAttribute("id","setProperty");const r=document.createElement("label");r.setAttribute("for","setProperty"),r.innerHTML="Task Name:",s.classList.add("taskDiv");const i=document.createElement("select");i.setAttribute("name","setPrio"),i.setAttribute("id","setPrio");const l=document.createElement("option");l.setAttribute("value","high");const d=document.createTextNode("High"),p=document.createElement("option");p.setAttribute("value","medium");const m=document.createTextNode("Medium"),u=document.createElement("option");u.setAttribute("value","low");const g=document.createTextNode("Low");l.appendChild(d),p.appendChild(m),u.appendChild(g),i.appendChild(l),i.appendChild(p),i.appendChild(u);const h=document.createElement("label");h.setAttribute("for","setPrio"),h.innerHTML="Add Priority";const k=document.createElement("input");k.setAttribute("type","date"),k.setAttribute("name","taskDueDate"),k.setAttribute("id","taskDueDate"),k.setAttribute("required","");const j=document.createElement("label");j.setAttribute("for","taskDueDate"),j.innerHTML="Due: ";const N=document.createElement("button");N.innerHTML="add";const f=document.createElement("div");return f.classList.add("taskOptions"),console.log("in tasks"),console.log(e),N.addEventListener("click",(()=>{const r=c.value,l=i.value,d=k.value;e.addTask({description:r,priority:l,dueDate:d,id:t++}),n++,function(e,t){let n=JSON.parse(localStorage.getItem("Projects"))||[];for(let o=0;o<n.length;o++)n[o].projectName===t.projectName?n[o].task=e:console.log("we dont match");localStorage.setItem("Projects",JSON.stringify(n))}(e.task,e);const p=document.createElement("div");p.classList.add("currentTasks"),p.setAttribute("data-id",n-1),c.value="",console.log(e);const m=p.dataset.id;console.log(m+"for currenttaskDiv"),p.innerHTML=`Task name: ${e.getDescription()[e.task.length-1]},\n             priority: ${e.getPrio()[e.task.length-1]},\n             it is due till ${e.getDueDate()[e.task.length-1]}`;const u=function(e,t,n){const o=document.createElement("button");return o.innerHTML="Mark as complete",o.addEventListener("click",(()=>{for(let o=0;o<e.task.length;o++)e.task[o].id==t&&(n.classList.contains("complete")?n.classList.remove("complete"):n.classList.add("complete"))})),o}(e,m,p),g=document.createElement("button");g.classList.add("deleteTask"),g.innerHTML="Delete Task",g.addEventListener("click",(()=>{for(let t=0;t<e.task.length;t++)e.task[t].id==m&&(o(e.task[t],e),e.task.splice(t,1),p.innerHTML=`Task name: ${e.getDescription()[t]},\n                     priority: ${e.getPrio()[t]},\n                     it is due till ${e.getDueDate()[t]}`);s.removeChild(p)}));const h=document.createElement("button");h.innerHTML="Edit Name",h.addEventListener("click",(()=>{let t=prompt("New Task name:");for(let n=0;n<e.task.length;n++)e.task[n].id==m&&(a(e.task[n],e,t),e.task[n].description=t,p.innerHTML=`Task name: ${e.getDescription()[n]},\n                     priority: ${e.getPrio()[n]},\n                     it is due till ${e.getDueDate()[n]}`);console.log(e),p.appendChild(u),p.appendChild(h),p.appendChild(g)})),s.appendChild(p),p.appendChild(u),p.appendChild(h),p.appendChild(g)})),f.appendChild(r),f.appendChild(c),f.appendChild(h),f.appendChild(i),f.appendChild(j),f.appendChild(k),f.appendChild(N),s.appendChild(f),s}function c(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];if(t.length>0){for(let n=0;n<t.length;n++)if(t[n].projectName===e)return e;return t[t.length-1].projectName}return e}const r=document.getElementById("content"),i=document.getElementById("projectName"),l=document.getElementById("submit");window.onload=function(){const o=function(){const e=localStorage.getItem("Projects");return e?JSON.parse(e):[]}();console.log("getting tasks"),console.log(o[0].task),o.forEach((o=>{console.log("tasksins"),console.log(o.task);const a=new e(o.projectName);console.log(a),console.log("before tasks"),console.log(a),o.task.forEach((e=>{a.addTask({description:e.description,priority:e.priority,dueDate:e.dueDate,id:e.id})})),console.log("after tasks"),console.log(a),function(e){console.log("here"),console.log(e);const o=document.createElement("div");o.setAttribute("id","projectNameDiv");const a=document.createElement("div");a.setAttribute("id","projectHeadline");const i=document.createElement("h3");i.innerHTML=`Project name: ${c(e.projectName)}`;const l=s(e),d=document.createElement("button");d.innerHTML="Delete Project";const p=document.createElement("button");p.innerHTML="Edit Project",o.appendChild(a),a.appendChild(i),a.appendChild(d),a.appendChild(p),o.appendChild(l),e.task.forEach((e=>{const t=document.createElement("div");t.classList.add("currentTasks"),t.innerHTML=`\n            Task name: ${e.description},\n            priority: ${e.priority},\n            it is due till ${e.dueDate}`,l.appendChild(t)})),d.addEventListener("click",(()=>{r.removeChild(o),t(e)})),p.addEventListener("click",(()=>{let t=prompt("Enter new project name:");n(e,t),i.innerHTML=`Project name: ${c(t)}`})),r.appendChild(o)}(a)}))},l.addEventListener("click",(()=>{const o=document.createElement("div");o.setAttribute("id","projectNameDiv");const a=document.createElement("div");a.setAttribute("id","projectHeadline");const l=document.createElement("h3");let d=i.value,p=new e(d);!1===function(e){let t=JSON.parse(localStorage.getItem("Projects"))||[];return t.find((t=>t.projectName===e.projectName))?(alert("Names are the same"),!0):(t.push(e),localStorage.setItem("Projects",JSON.stringify(t)),console.log("Project added successfully"),!1)}(p)&&(r.appendChild(o),JSON.parse(localStorage.getItem("Projects"))),l.innerHTML="Project name: "+c(d);const m=s(p),u=document.createElement("button");u.innerHTML="Delete Project";const g=document.createElement("button");g.innerHTML="Edit Project",o.appendChild(a),a.appendChild(l),a.appendChild(u),a.appendChild(g),o.appendChild(m),u.addEventListener("click",(()=>{r.removeChild(o),t(p)})),g.addEventListener("click",(()=>{let e=prompt("enter new project name:");n(p,e),console.log(e),d=e,p.projectName=d,l.innerHTML=`Project name is: ${d}`,l.appendChild(u),l.appendChild(g)})),i.value="",console.log(p)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,